{
  "name": "KITT 2D radial",
  "id": "EFwYoQtf5c6NCWAoh",
  "sources": {
    "main": "/*\n  Knight Rider: A car named KITT gains sentience and fights critme and all that \n  good stuff.\n  \n  Want to learn how to code patterns like this? This pattern has a YouTube\n  video walkthrough:\n  \n    https://www.youtube.com/watch?v=3ugNIZ96UK4\n    \n  Added a radial 2D mode\n*/\n\nleader = 0\ndirection = 1\npixels = array(pixelCount)\n\nspeed = pixelCount / 800\nfade = .0008\nexport function beforeRender(delta) {\n  lastLeader = floor(leader)\n  leader += direction * delta * speed\n  \n  if (leader >= pixelCount) {\n    direction = -direction\n    leader = pixelCount - 1\n  }\n  \n  if (leader < 0) {\n    direction = -direction\n    leader = 0\n  }\n\n  // Fill pixels between frames. Added after the video walkthrough was uploaded.\n  up = lastLeader < leader \n  for (i = lastLeader; i != floor(leader); up ? i++ : i-- ) pixels[i] = 1\n    \n  for (i = 0; i < pixelCount; i++) {\n    pixels[i] -= delta * fade\n    pixels[i] = max(0, pixels[i])\n  }\n  \n  resetTransform()\n  translate(-.5, -.5)\n}\n\nexport function render2D(index, x, y) {\n  var r = hypot(x, y)\n  v = pixels[min(r*1.9*pixelCount, pixelCount-1)]\n  v = v * v * v\n  hsv(0, 1, v)\n}\n\nexport function render(index) {\n  v = pixels[index]\n  v = v * v * v\n  hsv(0, 1, v)\n}\n\n"
  },
  "preview": "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"
}