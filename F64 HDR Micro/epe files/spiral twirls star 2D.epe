{
  "name": "spiral twirls star 2D",
  "id": "EToBJSBqojZaW8JMN",
  "sources": {
    "main": "/*\n  Spiral twirls star 2D\n  \n  This is \"Spiral twirls 2D\" (ChrisNZ) modified with some code from \n  \"Geometry Morphing Demo 2D\" (Zranger1) to mask to a star shape.\n  Mixed by wizard.\n  \n  A configurable 2D pattern that creates a variety of rotating and swirling\n  circular and spiral effects masked to a star.\n  \n*/\n\n//from Geometry Morphing Demo\nvar objectSize = 0.4;\nvar lineWidth = 0.05;\nexport function sliderSize(v) {\n  objectSize = .9 * v;\n}\nexport function sliderLineWidth(v){\n  lineWidth = 0.25 * v * v;\n}\n\n\nvar twistSpeed = .015\nvar rotateSpeed = .002\nvar startingColor = .3\nvar colorSpeed = .015\nvar twist, rotation, colorShift, arms\nexport var starRotateSpeed = .002 //added for rotating the star\nvar starRotationTimer = timer(starRotateSpeed)\n\n// How quickly the spiral should rotate back and forth\nexport function sliderTwistSpeed(v) { twistSpeed = v = 0 ? 0 : .015 / v }\n\n// How quickly the entire pattern should rotate\nexport function sliderRotationSpeed(v) { rotateSpeed = v = 0 ? 0 : .005 / v }\n\n// What initial colors to display. If colorSpeed is zero then the pattern will\n// stay this color\nexport function sliderInitialColor(v) { startingColor = v * 2 }\n\n// How quickly the colors of the pattern should change\nexport function sliderColorSpeed(v) { colorSpeed = v = 0 ? 0 : .015 / v }\n\n// How many arms of symmetry the pattern should have (1-3)\nexport function sliderArms(v) { arms = 1 + floor(v * 2.999) }\n\n//how fast to rotate the star mask\nexport function sliderStarRotation(v) {\n  starRotateSpeed = triangle(v)\n  starRotateSpeed = pow(10, (starRotateSpeed*starRotateSpeed -.5)*4)\n  if (v < .5)\n    starRotateSpeed = -starRotateSpeed\n  timerSetInterval(starRotationTimer, starRotateSpeed)\n}\n\n\nexport function beforeRender(delta) {\n  twist = wave(time(twistSpeed)) * 2 - 1\n  rotation = time(rotateSpeed)\n  colorShift = time(colorSpeed)\n  \n  resetTransform()\n  translate(-.5, -.5)\n  scale(2,2)\n  \n  // rotate entire scene\n  var theta = PI2 * timerNow(starRotationTimer);\n  rotate(theta);  \n}\n\nexport function render2D(index, x, y) {\n  if (hexStar(x, y, objectSize) > lineWidth)\n    return\n  \n  dist = hypot(x,y)\n  angle = (atan2(y, x) + PI) / PI / 2\n  angle += dist * twist / 2\n  \n  h = angle * arms - rotation + 10\n  h = h - floor(h)\n  v = (1.01 - dist) * (h < .5 ? h * h * h : h)\n  h = (h + startingColor) / 2 + colorShift\n  \n  hsv(h, 1, v)\n}\n\n// Experimentally-derived isometric projection. YMMV.\nexport function render3D(index, x0, y0, z0) {\n  x = x0 / 3\n  y = y0 / 3 + 0.68\n  z = z0 / 3 - 0.75\n  px = 0.4 * (1.71 * x - 1.71 * z)\n  py = 0.4 * (x + 2 * y + z)\n  render2D(index, px, py)\n}\n\n// Render the line sliced across the horizon, y = .5\nexport function render(index) {\n  pct = index / pixelCount\n  render2D(index, pct, 0.5)\n}\n\n\n//from Geometry Morphing Demo\nfunction signum(a) {\n  return (a > 0) - (a < 0)\n}\n\nfunction hexStar(x,y,r) {\n  // rescale to pointy parts of star\n  x = abs(x*1.73205); y = abs(y*1.73205); \n  dot = 2 * min(-0.5*x + 0.866025 * y,0);\n  x -= dot * -0.5; y -= dot * 0.866025;\n  \n  dot = 2 * min(0.866025*x + -0.5 * y,0);\n  x -= dot * 0.866025; y -= dot * -0.5;\n  \n  x -= clamp(x, r * 0.57735, r * 1.73205);\n  y -= r;\n  return signum(y) * hypot(x,y) / 1.73205;\n}\n\n\n//timer utility functions for smooth speed adjustment\nfunction timer(interval) {\n  return [0, interval]\n}\n\nfunction timerSetInterval(timer, interval) {\n  var p1 = time(timer[1]) //measure the current interval's value\n  var p2 = time(interval) //measure the new interval's value\n  //calculate the phase difference between these\n  timer[0] = mod(timer[0] + p1 - p2, 1)\n  timer[1] = interval\n}\n\nfunction timerNow(timer) {\n  return (time(timer[1]) + timer[0]) % 1\n}\n"
  },
  "preview": "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"
}