{
  "name": "spiral twirls 2D",
  "id": "A8P6jQMBvTTfoPEwA",
  "sources": {
    "main": "/*\n  Spiral twirls 2D\n  \n  A configurable 2D pattern that creates a variety of rotating and swirling\n  circular and spiral effects.\n  \n  Output demo: https://youtu.be/Qa7B59CbYNw\n  \n  For best results a matrix of 16x16 or greater is recommended.\n  \n  It's suggested to start with all the sliders at zero, then try each of them\n  one at a time to see what impact it has on the resultant pattern. That way it\n  should be easier to understand how to combine them all to get the effect you'd\n  like.\n  \n  There's a limited 3D and 1D projection provided.\n  \n  Generously contributed by ChrisNZ (Chris) from the Pixelblaze forums.\n    https://forum.electromage.com/u/chrisnz\n*/\n\nvar twistSpeed = .015\nvar rotateSpeed = .002\nvar startingColor = .3\nvar colorSpeed = .015\nvar twist, rotation, colorShift, arms\n\n\n// How quickly the spiral should rotate back and forth\nexport function sliderTwistSpeed(v) { twistSpeed = v = 0 ? 0 : .015 / v }\n\n// How quickly the entire pattern should rotate\nexport function sliderRotationSpeed(v) { rotateSpeed = v = 0 ? 0 : .005 / v }\n\n// What initial colors to display. If colorSpeed is zero then the pattern will\n// stay this color\nexport function sliderInitialColor(v) { startingColor = v * 2 }\n\n// How quickly the colors of the pattern should change\nexport function sliderColorSpeed(v) { colorSpeed = v = 0 ? 0 : .015 / v }\n\n// How many arms of symmetry the pattern should have (1-3)\nexport function sliderArms(v) { arms = 1 + floor(v * 2.999) }\n\n\nexport function beforeRender(delta) {\n  twist = wave(time(twistSpeed)) * 2 - 1\n  rotation = time(rotateSpeed)\n  colorShift = time(colorSpeed)\n}\n\nexport function render2D(index, x0, y0) {\n  x = (x0 - .5) * 2\n  y = (y0 - .5) * 2\n  dist = sqrt(x * x + y * y)\n  angle = (atan2shim(y, x) + PI) / PI / 2\n  angle += dist * twist / 2\n  \n  h = angle * arms - rotation + 10\n  h = h - floor(h)\n  v = (1.01 - dist) * (h < .5 ? h * h * h : h)\n  h = (h + startingColor) / 2 + colorShift\n  \n  hsv(h, 1, v)\n}\n\n// Experimentally-derived isometric projection. YMMV.\nexport function render3D(index, x0, y0, z0) {\n  x = x0 / 3\n  y = y0 / 3 + 0.68\n  z = z0 / 3 - 0.75\n  px = 0.4 * (1.71 * x - 1.71 * z)\n  py = 0.4 * (x + 2 * y + z)\n  render2D(index, px, py)\n}\n\n// Render the line sliced across the horizon, y = .5\nexport function render(index) {\n  pct = index / pixelCount\n  render2D(index, pct, 0.5)\n}\n\n// You can remove this shim if you're running v3.8 or newer\nfunction atan2shim(y, x) {\n  if (x == 0 || y == 0) {\n    return 0 \n  } else {\n    return atan2(y, x)\n  }\n}\n"
  },
  "preview": ""
}