{
  "name": "Doom Fire (v2.0) 2D",
  "id": "zdsRg6vvwf7eyEbZ2",
  "sources": {
    "main": "/* DOOM Fire\n\n Updated 2D Fire effect, with \"enhanced\" dragon's breath mode. \n Now with More, Better fire!  Version 2 has more dramatic flame,\n and an improved wind algorithm. \n \n The method is inspired by the low-res fire in the prehistoric PSX port of DOOM!\n Details: https://fabiensanglard.net/doom_fire_psx/ It's purely convolution-based \n fire -- no Perlin or other gradient, value or fractal noise fields. \n \n Requires a 2D display and an appropriate mapping function.\n\n MIT License\n \n v2.0    JEM(ZRanger1) 00/02/2021 \n*/ \n\n// display size - enter the dimensions of your display here\nvar width = 8;\nvar height = 8;\n\n// array is sized one row larger than display so we can permanently\n// store the \"source\" fire in the last row, and two rows wider so\n// we don't have to worry about clipping or wrapping.\nvar arrayWidth = width + 2;\nvar arrayHeight = height + 1;\nvar lastRow = arrayHeight - 1;\nvar lastCol = width + 1;\n\n// Global variables for rendering\nvar buffer1 = array(arrayWidth);   // main drawing surface\nvar buffer2 = array(arrayWidth);   // secondary drawing surface\nvar pb1, pb2;                      // buffer pointers for swapping\n\nvar baseHue = 0;\nvar baseBri = 0.6;\nvar maxCooling = 0.275;        // how quickly flames die down  \nvar dragonMode = 0;           // 0: plain old fire, 1: dragon's breath\nvar breathTimer;              // dragon's breath cycle time\nvar wind = 0.50;              // probability of wind direction change. 0 == no wind\nvar windDirection = 0;        // current wind direction\nvar frameTimer = 9999;        // accumulator for simulation timer\nvar simulationSpeed = 60;     // min milliseconds between simulation frames\nvar perturb = perturbNormal;  // pointer to fn that plays with fire\n\n// UI\nexport function hsvPickerHue(h,s,v) {\n  baseHue = h;\n  baseBri = v;\n}\n\nexport function sliderFlameHeight(v) {\n  v = (1-v); v = v * v;\n  maxCooling = max(4 * v,0.1);\n}\n\nexport function sliderWind(v) {\n  wind = (v * v) / 2;\n  if (wind == 0) windDirection = 0;\n}\n\nvar lastDragonMode = dragonMode;\nexport function sliderDragonMode(v) {\n  dragonMode = (v > 0.5);\n  if (dragonMode == lastDragonMode) return;\n  lastDragonMode = dragonMode;\n  \n  if (dragonMode) {\n    perturb = perturbDragonBreath;\n  } else {\n    initBuffers();\n    perturb = perturbNormal;\n  }\n}\n\n// simulation speed (ms per frame). Adjust to taste\n// for your display\nexport function sliderSpeed(v) {\n  simulationSpeed = v * 200;\n}\n\n// create two buffers for calculation\nfunction allocateFrameBuffers() {\n  for (var i = 0; i < arrayWidth; i ++) {\n    buffer1[i] = array(arrayHeight);\n    buffer2[i] = array(arrayHeight);\n  }\n  pb1 = buffer1;\n  pb2 = buffer2;\n}\n\n// set the lowest row to 1 - this is the source of our fire\nfunction initBuffers() {\n  for (var i = 0; i < arrayWidth; i ++) {\n    pb1[i][lastRow] = 1;\n    pb2[i][lastRow] = 1;    \n  }\n}\n\nfunction perturbDragonBreath() {\n for (var i = 0; i < arrayWidth; i ++) {\n   pb2[i][lastRow] = breathTimer+wave(-.21+(i/arrayWidth));\n  }\n}\n\n// change the base heat in a slow wave\nfunction perturbNormal() {\n for (var i = 0; i < arrayWidth; i ++) {\n   pb2[i][lastRow] = 0.9+wave(triangle(time(0.3))+(i/arrayWidth))/3;\n  }\n}\n\nfunction swapBuffers()  {\n  var tmp = pb1; pb1 = pb2; pb2 = tmp;\n}\n\n// Fire is hottest at the bottom, and \"cools\" as it rises. Each pixel\n// calculates it's value based on the one below it, with allowance for\n// the current wind direction.\nfunction doFire() {\n  swapBuffers();\n  \n  if (wind > 0) windDirection = (random(1) < wind) ? floor(random(3)) - 1 : windDirection;\n\n  for (var x = 1; x < lastCol; x++) {\n\n    // cooling effect decreases with height, so very hot particles\n    // that don't cool early on get \"carried\" farther.  It just looks better.\n   for (var y = 1; y < lastRow; y++) {\n      var r = random(maxCooling) * (y/lastRow);\n      var windFx = (abs((lastRow / 2) - y) / lastRow);\n      windFx = x + (random(1) < 0.5-windFx) * windDirection;\n      pb2[x][y] = max(0,pb1[windFx][y+1] - r);\n    }\n  }  \n}\n\n// Initialization\nallocateFrameBuffers();\ninitBuffers()\n\nexport function beforeRender(delta) {\n  frameTimer += delta;\n\n  if (frameTimer > simulationSpeed) {\n    breathTimer = wave(time(0.1));    \n    \n    doFire();  \n    perturb();\n\n    frameTimer = 0;\n  }\n}\n\nexport function render2D(index, x, y) {\n  x = 1+(x * width);  y = (1-y) * height;\n  bri = pb2[x][y];\n  bri = bri * bri * bri;\n  hsv(baseHue+((0.05*bri)), 1.3-bri/4,baseBri * bri);\n}"
  },
  "preview": "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"
}