{
  "name": "pride",
  "id": "hArCKQRSAt9iEbzPQ",
  "sources": {
    "main": "// Pride pattern\n// based on Pride2015 by Mark Kriegsman: https://gist.github.com/kriegsman/964de772d64c502760e5\n// modified by Ben Hencke to run on Pixelblaze\n\nvar fibonacciToPhysical = [ 0, 39, 19, 58, 29, 9, 48, 20, 59, 38, 10, 49, 28, 1, 40, 18, 57, 30, 8, 47, 21, 60, 37, 11, 50, 27, 2, 41, 17, 56, 31, 7, 46, 22, 61, 36, 12, 51, 26, 3, 42, 16, 55, 32, 6, 45, 23, 62, 35, 13, 52, 25, 4, 43, 15, 54, 33, 5, 44, 24, 63, 34, 14, 53 ]\n\n// beatsin8( BPM, uint8_t low, uint8_t high) returns an 8-bit value that\n// rises and falls in a sine wave, 'BPM' times per minute,\n// between the values of 'low' and 'high'.\nfunction beatsin8(bpm, low, high) {\n  return wave(time(0.91552734375/bpm)) * (high - low) + low\n}\n\nfunction beatsin88(bpm, low, high) {\n  return beatsin8(bpm>>8, low, high);\n}\n\nvar sPseudotime = 0; //was uint16_t modified to be a value between 0 and 1\n// var sLastMillis = 0; //uint16_t\nexport var sHue16 = 0; //was uint16_t seems to work fine as-is\nexport var ledarray = array(pixelCount*3);\n\nfunction pride(deltams, useFibonacciOrder) {\n  // var sat8 = beatsin88( 87, 220, 250); //uint8_t\n  // var brightdepth = beatsin88( 341, 96, 224); //uint8_t\n  var brightdepth = beatsin88(171, 96, 224); //uint8_t\n  // var brightnessthetainc16 = beatsin88( 203, (25 * 256), (40 * 256)); //uint16_t\n  var brightnessthetainc16 = beatsin88( 102, (25 * 256), (40 * 256)); //uint16_t\n  // var msmultiplier = beatsin88(147, 23, 60); //uint8_t\n  var msmultiplier = beatsin88(74, 23, 60); //uint8_t\n\n  var hue16 = sHue16;//gHue * 256; //uint16_t\n  // var hueinc16 = beatsin88(113, 300, 1500); //uint16_t\n  // var hueinc16 = beatsin88(57, 1, 128); //uint16_t\n  var hueinc16 = beatsin88(57, 1, 128*3); //varies a bit more\n\n  // var ms = millis(); //uint16_t\n  // var deltams = ms - sLastMillis ; //uint16_t\n  // sLastMillis  = ms;\n  sPseudotime += (deltams * msmultiplier) >>16;\n  // sHue16 += deltams * beatsin88( 400, 5, 9);\n  sHue16 += deltams * beatsin88( 200, 5, 9);\n  var brightnesstheta16 = sPseudotime; //uint16_t\n\n  for ( var i = 0 ; i < pixelCount; i++) { //uint16_t\n    hue16 += hueinc16;\n    var hue8 = hue16 / 256; //uint8_t\n    //this is doing a triangle\n    var h16_128 = hue16 >> 7; //uint16_t\n    if ( h16_128 & 0x100) {\n      hue8 = 255 - (h16_128 >> 1);\n    } else {\n      hue8 = h16_128 >> 1;\n    }\n\n    brightnesstheta16  += brightnessthetainc16>>16;\n    brightnesstheta16 = mod(brightnesstheta16 + (brightnessthetainc16>>16), 1)\n    var b16 = wave( brightnesstheta16); //uint16_t\n\n    //var bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536; //uint16_t\n    var bri16 = b16 * b16\n    //var bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536; //uint8_t\n    var bri8 = bri16 * (brightdepth>>8)\n    bri8 += (1 - (brightdepth>>8));\n\n    var index = hue8; //uint8_t\n    //index = triwave8( index);\n    index = index/256 * 240;\n\n    // CRGB newcolor = ColorFromPalette( palette, index, bri8);\n\n    var pixelnumber = useFibonacciOrder ? fibonacciToPhysical[i] : i; //uint16_t\n\n    // nblend( ledarray[pixelnumber], newcolor, 8);\n    //TODO palletes, blending in RGB. For now use the 3 byte pixel for hue and value\n    ledarray[pixelnumber*3] = hue8 / 128;\n    ledarray[pixelnumber*3 + 2] = bri8;\n  }\n}\n\nexport function beforeRender(delta) {\n  pride(delta, 1)\n}\n\nexport function render(index) {\n  v = ledarray[index*3+2]\n  hsv(ledarray[index*3], 1, v*v)\n}\n"
  },
  "preview": "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"
}