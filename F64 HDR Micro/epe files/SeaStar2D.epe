{
  "name": "SeaStar2D",
  "id": "Fa28yjsgxZSnPinRb",
  "sources": {
    "main": "// Sea Star 2D\r\n//\r\n// 10/27/2021 ZRanger1\r\n\r\nvar timebase;\r\nexport var complexity = 1.5;\r\nexport var nSides = 5;\r\nexport var speed = 1.75;\r\nvar slice = PI / nSides;\r\nvar waveScale = 8;       // larger values == more complex waves\r\nvar contrast = 0.02023;  // smaller values == higher contrast\r\n\r\ntranslate(-0.5,-0.5)\r\nscale(.5,.5)\r\n\r\nexport function sliderSpeed(v) {\r\n  speed = (4 * v);\r\n}\r\n\r\nexport function sliderComplexity(v) {\r\n  complexity = 1+(1.5*v);\r\n}\r\n\r\nexport function sliderReflections(v) {\r\n  nSides = 1+floor(v * 15);\r\n  slice = PI / nSides;  \r\n  waveScale = 8;  \r\n}\r\n\r\nexport function beforeRender(delta) {\r\n  timebase = (timebase + delta/1000) % 3600;\r\n  t = timebase * speed; \r\n  t2 = t / 2 * complexity;\r\n}\r\n\r\n// sets up a kaleidoscope effect - makes the image repeat over evenly divided\r\n// rotated \"slices\" about the center.\r\nvar x1,y1,s,temp;\r\nexport function render2D(index,x,y) {\r\n  var r,g,b;\r\n  \r\n  // fold coordinate space across our slices\r\n  var angle = atan2(y, x);\r\n  angle = mod(angle, 2.0 * slice);\r\n  \r\n  // rotate image over time\r\n  angle += t;\r\n  \r\n  // map new rotated coordinates back to original image space\r\n  var d = hypot(x,y);\r\n  x1 = 1-(d * cos(angle) * waveScale + t2);\r\n  y1 = d * sin(angle);  \r\n  \r\n  // draw a few iterations of our wave function over a short time interval  \r\n  for (i = 0; i < 3;i++) {\r\n    y1 += sin(x1*(i*complexity) + (t + i/complexity)) * 0.5;\r\n    b += i * abs(contrast/y1);\r\n  }\r\n\r\n  b = clamp(b,0,1);\r\n  hsv(0.6667 - (0.075 * b),1,b)\r\n}"
  },
  "preview": "/9j/4AAQSkZJRgABAQAAAQABAAD/4gIoSUNDX1BST0ZJTEUAAQEAAAIYAAAAAAQwAABtbnRyUkdCIFhZWiAAAAAAAAAAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAAHRyWFlaAAABZAAAABRnWFlaAAABeAAAABRiWFlaAAABjAAAABRyVFJDAAABoAAAAChnVFJDAAABoAAAAChiVFJDAAABoAAAACh3dHB0AAAByAAAABRjcHJ0AAAB3AAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAFgAAAAcAHMAUgBHAEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvogAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z3BhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABYWVogAAAAAAAA9tYAAQAAAADTLW1sdWMAAAAAAAAAAQAAAAxlblVTAAAAIAAAABwARwBvAG8AZwBsAGUAIABJAG4AYwAuACAAMgAwADEANv/bAEMABQMEBAQDBQQEBAUFBQYHDAgHBwcHDwsLCQwRDxISEQ8RERMWHBcTFBoVEREYIRgaHR0fHx8TFyIkIh4kHB4fHv/bAEMBBQUFBwYHDggIDh4UERQeHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHv/AABEIAJYAZAMBIgACEQEDEQH/xAAcAAABBQEBAQAAAAAAAAAAAAAFAAIDBAYBBwj/xABAEAABAwMDAAYFCAoBBQAAAAABAgMEAAURBhIhBxMiMUFRFHGBobEjMmFicpGywRUkMzRCUmOCotGSJVNzwuH/xAAbAQACAwEBAQAAAAAAAAAAAAACAwABBAUGB//EADsRAAEDAgIGCAQDCAMAAAAAAAEAAgMEERIhQVFhgaHBBRMiMXGx0fAjMkKRFIKSBiRSYnKisvHC0uH/2gAMAwEAAhEDEQA/APm7o9cfTr5kxwFOkOYB7vmHNZyQvdGVjuL6jV2wTXbdqZqWysoWgqwR9KSPzoWVAxwMjO8nFfQy/sgbTyXGjhIqC/QWtH2xeq02gxKls3W0RzxIjla05xkIBV+VZ9g/IoH2/hRDSDzzNxeUwpSVmO4MpPONpzQqMTnGeAk/Cqe+7G7+SjIyJ5DoNjvsR6I7ol5ho3QSGutSqA8EjyVt4Psobeni9IaJ70soTnz7Iq5o2VHiyp5kt9Yhy3voSPJRTwaEylFTicnJ2JHuq8fwwFI4/wB7e62gLa9H0yC3AhMSEFbovbC8YyCgIVkVlrqsLu1wWO4rVj1Zq/oGQyxqS1qk/sEzkKXxnjBoXNWly4zlo+apayPVuq3SXiaNSRDD1dZIc8wDxPoj/RnKbY1Rai84ENJkrUonuHyShWYlK3SXSDkFZOfbU9neU1OZIwNqic+w1TPefXQY7sA99wWuODDUPk1gD7Fx5r0jTrCl9Fci4iaj9TfXhjdyCoAZArAIWA0lSj3lXwo3YfSF6Tu3VhRaZCVOEdwycDNAFfuzf2jTJn4ms8FkooSyWa5vd32uL24rR6buz0S1pZQ6UgKJxmlWdYkrbb2JCcfSKVEypeGgXRS9HMe8uI70/dsuBVkDBPf6qrJGSB5muuKKllSuSa4389PrFYibGy6QbYI3pCYi2X9T620upDDyMKHHaQRn30FbUUng+FTBfVzVqJx84VG4kIKQM8pBosVwBtPJKZGBIX6SBwv6p8NRStePFtQ91RuK3rBxjgCmePsqSP8At0faqgU0ixLlLbXC3OZUCRhYNQuHLiz5k11CgmTuPcFZphOSTUDsrKBvaunx1BDyVE4ApoBJwBk1wAkkgZxUkTl5OOe/4VQVnK5RK0XB2NYLxCSR1cpLQWMfyryKGq/dm/tGk0raw8nOMgcefNdIzHaA8VGrx3AGr1SmxtY5zhpN+AHJQ0qSwUrKfI4pUrFZPT3k7Qg5zuGa7s2ra5+cAa7J+Y19mpHk4cjfShJ99MIOI7kvFkFFKGJLg+safMTtcQP6ST7qdPRtnFOc5VmpLukIlpSBgBpPwq7ZnxQh1y3wUCkJElpIHB28UmR+ugd3bx76lKf16OPPZXI4/wCqJH9bHvqgO1vUxZblXcGHl+s00d1W3kBMuSlIwAkmqqe6qOR+6NrrhWVJwuTgAAI/1TbcndKQPPPwqw4nDk0eTY+IpWZO6SwPNavw0YbZ4HvvSS/4ZPvuQ9QIJBGDVhA+TYH9T/VRShiQ4PrGp2wcRsgjLn5ilt7z70prjkCq8kYkOD6xpVLckbJrqe/tE0qW9vaKNhu0FSS0fq0dee9OMe2pbggIlxUgYHVp+NPnoxboSvMfnTrqkm6x0AZ7KRx661ubmdyyNfcjeorsjbdQPrD40+8pBuJBGcMj4VY1I31d0b7PO8c+2oLtzc3P/F+VW9ti4bRzQRPxBh2HkuSEBM2CrHJCM+6oYQ3XtA83/wA6vXRsodtyscFCD8Kr2hG+9snxMpI99QttIBtVtfeIu2FdmNlNwmgjHyasceqh6EjqN/Od2KNX1Bbucsf0lfGg6B+qZ/qChlbZ5Hijp34owfBErmkoflD+iPiKZp4ZnxR9dX4ataha2vvL82gMfdUdiATNgHGMqVn/AImm4bTW996zh96YnZyQy6ILc5wHxOanI7ULy3j4iu39GLmR3ZqWWjq1Qk5zhQ+IpOGznrQH3YzaOSgvidtydA86VErmylctSihKsjvIFKjkj7RyQw1AEYCfc2CnTludKeCgEH21Xkgr1DFT5lA99anUMBI0BYHkn9pFClHHjvNZ2MkL1JEJH8bX4xWiWOxG2y59LUCSNzhoLxxV3X8RUe7pBGNrgB++g1wGZUgkchoc+w1t+mWOE3p9YGPl8++sdNZOZK+P2Q/Orqo7SOQ9Fz9bSxPOkeiv6kZ2RrYvuy218BQ7TrZVfInfgzUD18mtLqiODbbbkd0dhXH2RQjSbJcvVsGPnXJCf8jRSR/GCkE4NG4+PNd1c0Ez5C+c7VD30EWki1tH69abWrfykpQHzVLSfvoJMY6uxx1jOC4PhS52fEcdifRS3hZfXyV/U6fkVL80AVDb2y3ItwzntK/Cat6hG6ArzG0fCpnIqmlWxeMZyf8AE00s+IXeHmkMktCGnTfyQbUSAZjKgBlRqW9tFtcLjgbfyqW5oDsmGMA5cIolryGqHIgNqTjc00se2lmPJ7vBNbOA+KPWCq7jaXFlRFKnJV38eNKnWCRdwWxuMfrui2wqAyRE/wDY1irezm9x3SeApv8AHW8sSzM6OrUyo5CEqbH3E0DsVpW/FmywABGZQv19utEkWPARqC49HUdQ2Zrz9TuLkX6W2kvTX1oAUCUrH31iZcRRtk18DhLaffmt5rBsyFRk95dgtufGqs21KjdGV0muNjD3UhCiOeCc0U8WNznbEvo6sFPTRMJzu0fcgKrqmPiPAaxyLfHX/gKo6Ltq/SbTNCSG03hkE48STRrUY3TYCD/FbGPwCjVphtwtIafTja87fGlKHiQFGrMeJ2LV/wCJL60xUbWaXZcDdYDWCSs3FIHPXrx/yNS6isbrGgLZcFjal18JSfPg0tQNly5T2gOS+r8Rra9LEVuF0f2S2pUCpMhBA+gpP+6U5lw92zmtjqx0L6WJv1O4YV57OQXEqbHflP5Vrta2cwbdp+QlOErQUq+1tJoLbIK5l+RFSncVFPH3V6N0rNIdhWppvHyT6spHh2KbHHdjj4eay1taY6uCJunET+leRxY/pV3gND/unjzrT9L8bZeYCNo7EZpP3VX0HBMrWEZBTkNqKjWo6WYSpk2PLbRlIV1ftTQsiLoXeKZUVoZ0nCzQGnivMXcpcUM+NKpZzRRKWnuwaVZCCCu80ggFbPSpDXR/BWDwmWpH+Fa2wQIcLTMVpxAW5cY69/OMBKSoe8VkdNNqc6OY+O4XDn1FIFE9SXJyDem4rS+zCbUyk4xxtP8AuupCbMaTqC8ZWxPnmfEw/U4/bu4kKC6EqmWfPPWWxCfaQaudIzqEaTg2hvAUlgFwDzA+NMusZbTGmLgeGyyyjd6jzVW7IcvGqJMVoF3ct4IA5yBVn5SNakWF0kchOTMR3gkJl3ZDmobE2o9l2NGbJ/tAot0hyxGvlpgs7UoiSG1DaMe2mantr1tj2W4rSQ4wpAWCPm7cYoJflu3HUkdXJWtYXVOBaCPBSnDZ3RyXu1ocN/8ApMt9vTM1u3GeB2PO5V6ic0S6TkO3DU8G0NArIfSlCf7a1keztM64jStowuEVgD+FQwKyOsJghdKEWUobgzISoj+3FSRmFhGsoKasNTVtcz6YyR4q3oq1ON69c3J2+jtbyD91G3IqLxqS6Q1klUdO5seAJ4owUMx9WNzAgAS44ZJH8+d3PsrLw5i4/SpJbCiEuFW4Z7wATTrBmW1c3r5Kt75RkRGCNxz5qpoCEIOp7x1yMORg2E/QSvBrZ29mHNiy2pqW1J9NcSnccc58KBKLDV7mSmsj09mO6kHzLnNAtQXR6LdH2ELI2znFge2qaRG1Mmhk6QmxA2JA4AX4rMaut5iaglMhBCQs7c+XhSrX6otzl6uLc9kF0LYbClAfxAc0qyvpyXEhekpelGCFgkNjYXVno9g7ujdDDiUpXKX1jO4d+OePurHaglKm3GXNxjrHj3erFGrPfSxYbKhngxYxCgfM5/3UVttLMrRMi5Kdw8mWlITjvBUkfnRnONrRqWKG9PUSTS/U6w3m3ILQSnWZ+hmoyEZehR21JOec55+FCNBLKNRMTlglIafWfpwnNTR3k2q6y2nFnqm/SGMjxIQcVdajRbdohl9DgExuMHDjjIdHdTe8g6liNoonRDMSHL8wN+Pmr+oLi3fbJNYb7I6rr2wT/IMmhem4SE6pgyJQKW0wS8lR8wBzQlmZ6LpSDIT8+QxKZV7hR3VchbVnjSGTsMOI3HWc8nrEA/lUxB3a8EIgMA/Dx5BxcPD6fOyOqmlu6hG8KWiY2wlQ79i0lRFYXpZjOR9WtSFDCXcLSfoBxVlm5CZriAW8htySwcZ8QjFO6UluTb46nb2YaerBH080MrsbD4ouj6d1LWx30sz4c0XduYf1DGix1la/0kFJI/l6qg2tQ5aukNElKsF5ouAjwyCKFaam9Xqu2SHMlPXbjz9UirHSJIcmaycyc+jlLCceWf8A7Qufdl9q0wUfU1jYx8uA3+9lp9MtC5xrW64o7kuqZUfJKBkCs50gxVMaxEcEKLyg5x9Y0Z0xcTa40+2unY6xLGzjkZICufVQ6U4q9dJCXd4KI6yrP1G+fhRv7TANKRTCSKrkkPyBrvUea2fR9KZb0/1T7yELQ+4khRwRg0q84euxE+atlZDbklxafUTmlVtmaBZZKj9nnTyOkxWvmg9qUpUKSkZPUs59XNG5a0R4lmjRl5D0dDziQrPbCs/lQ7S230bUjStuRCSE58+sHdTtNyGmtVRm5hHVNJdQQoZ/gOPfWRjrAbcuK9RUNxPeQPlztr7N/MoneJXpVhROIHWP3STuI8cpFCv0i8+2mOtxStrfVYJ8EjgVVsr5kNsRnVHq0zsqye7cQCamiNMK14uCleYwnLb3ZGNm7vz6qnWE2OtRkDYQ5hHy3O66ktzrk6JbLVuGEyFtp+grUKL68musTJ9r39gJZ3D6UIxQFAVGkXWXEUrq4M/CFg93aODn2U6+uuXK9TXRla/Qw6o+PCRk1MdmW0/7VdQHVAf9IBO8lrua7anVpuNtkA96woH1cV6NF/Rt1uV/jy17UoeQ8VfVDYHf66xtkhIm2WyOsbOsahPvvEK57LmBmo7VcMSNULUvBVBO315TTI3YQCdPosNbD+Jc4sNi3L+8DkmR4SmXLVLQdyVx+v48B1hHNE7oliRB1Bf3sApmISxz3qCkkj7qG6bvLirY1FWkK3wfREH+XtldCrjdSdKPwhjm4KdJ/tAx7qAvaI77OS1fh5pJ7HvBA3Yr8rIo9PMq/TZKeyH3i7gUrQ44m33q8tulDkchAx3kLJBqKzQHl3KI2pBBfgqfTnxG0nPuoP17rWlXilRCJLqknnv21ReRmdvvinCFj/hs/lG6+fAFPklbSkA8bkBX30qtaleZmvwnYowlMFlCuMdoJ5pUp1wcluhs+MOdkVXgLLWqJkfPYUpKVDzGQa5qWQka1uDjCdjfpS9qcYwNtKlQuNm/mQsaDUD+j/qlptjrbLe5ecGKWlAeeV4rmhgJ+pHdyikpZkO5+lKc0qVCzvj96VU7iI6k6u79IXbPLzpLUTKgSt19pwHyxmu2qf1FwuSlIKuttK2u/uykc0qVRpNm+9JRujaXSgjTyYrGh5T7aIrTaykOZjq570q5PwqnCcUXr+Mn93UP8hSpUYJ6tnvQgc0CaXLV/ki2gYKJEW1vrV8+5LYIx4BkqrIynCYjyfAvKNKlSpD8FvvQEVI4urJQdFvNy3enbgHbhbH3EECPaVsdnvOEK599Z2epKOjS0rxyqdJyccnhNKlTpD2Nx/4rLCwNqQB/E3ykRDTED9IWdqQVAZ7PP0UqVKtULAWAlZKuaRs7wDlcr//Z"
}