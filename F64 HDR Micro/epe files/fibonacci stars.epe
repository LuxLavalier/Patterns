{
  "name": "fibonacci stars",
  "id": "hiinN65AxsHBrdRat",
  "sources": {
    "main": "\n// Fibonacci Stars pattern by Jason Coon\n// For Fibonacci256: https://www.tindie.com/products/19429\n// Meant for use in this sketch: https://github.com/jasoncoon/esp8266-fastled-webserver/tree/fibonacci256\n\n// modified by Ben Hencke to run on Pixelblaze\n\nvar starCount = 2;\nvar starMagicNumbers = [8, 13, 21]\n\nvar fibonacciToPhysical = [ 0, 39, 19, 58, 29, 9, 48, 20, 59, 38, 10, 49, 28, 1, 40, 18, 57, 30, 8, 47, 21, 60, 37, 11, 50, 27, 2, 41, 17, 56, 31, 7, 46, 22, 61, 36, 12, 51, 26, 3, 42, 16, 55, 32, 6, 45, 23, 62, 35, 13, 52, 25, 4, 43, 15, 54, 33, 5, 44, 24, 63, 34, 14, 53 ]\nvar stars = array(starCount)\nvar moveTimer\nvar gHue = 0\nvar leds = array(pixelCount)\nvar hues = array(pixelCount)\nvar fade = 0.995\nvar moveTimerTarget = 90\n\nexport function sliderSpeed(v) {\n  v = 1-v\n  moveTimerTarget = 10 + (v*v)*190\n}\n\nexport function sliderFade(v) {\n  fade = (1-(v*v)) * .0999 + .9\n}\n\n\n//setup initial stars state\nstars.mutate(() => {\n  var offset = starMagicNumbers[random(starMagicNumbers.length)]\n  return [\n    randomInt(offset),\n    offset\n    ]\n})\n\n\nexport function beforeRender(delta) {\n  gHue = (gHue + delta/40) % 256\n  \n  \n  //only move the stars every so often\n  moveTimer += delta\n  if (moveTimer > moveTimerTarget) {\n    moveTimer -= moveTimerTarget\n    updateFibonacciStars()\n  }\n  \n  //fade to black\n  leds.mutate(v => v * fade)\n  \n  drawFibonacciStars()\n}\n\nexport function render2D(index, x, y) {\n  v = leds[index]\n  h = hues[index]/ 256\n  hsv(h, 1.75 - v, pow(v, 2))\n}\n\n\nfunction randomInt(n) {\n  return floor(random(n))\n}\n\n\nfunction updateFibonacciStars() {\n  stars.forEach((star) => {\n    // move the stars\n    star[0] += star[1]\n    \n    //reset any stars out of bounds\n    if (star[0] >= pixelCount) {\n      star[1] = starMagicNumbers[random(starMagicNumbers.length)]\n      star[0] = randomInt(star[1])\n    }\n  })\n}\n\nfunction drawFibonacciStars() {\n  stars.forEach((star) => {\n    var index = fibonacciToPhysical[star[0]];\n    // draw the star\n    leds[index] = 1\n    hues[index] = star[0] + gHue\n  });\n}\n"
  },
  "preview": "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"
}