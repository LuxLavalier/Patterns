{
  "name": "fast pulse 2D/3D",
  "id": "BvZoMSk6wu37yZ8zY",
  "sources": {
    "main": "/*\n  Fast pulse 2D/3D\n  \n  3D example: https://youtu.be/EGUTLHb98wM\n  \n  This pattern is designed for 3D mapped projects, but degrades gracefully\n  degrade in 2D and 1D.\n  \n  The 3D variant of this pattern sweeps a series of parallel planes (layers) \n  though space and rotates them.\n  \n  The 1D variant is a single Cylon-like eye that changes colors slowly, and\n  bounces across the boundary of the strip's endpoints with a circular\n  continuance.\n*/\n\n\nexport function beforeRender(delta) {\n  /*\n    This 0..1 time() output cycles every (0.1 * 65.535) seconds. We'll use this \n    both as the single output hue, as well as a basis for the function that \n    creates the rotating / bouncing pulse(s).\n  */\n  t1 = time(.1)\n  \n  a = sin(time(.10) * PI2)  // -1..1 sinusoid every 6.5 seconds\n  b = sin(time(.05) * PI2)  // -1..1 sinusoid every 3.3 seconds\n  c = sin(time(.07) * PI2)  // -1..1 sinusoid every 6.6 seconds\n}\n\nexport function render3D(index, x, y, z) {\n  /*\n    The formula for a 3D plane is:\n\n      a(x − x1) + b(y − y1) + c(z − z1) = 0 \n\n    where the plane is normal to the vector (a, b, c). By setting out output\n    brightness to the right hand side, the initial defined plane is the dark\n    region, where `v == 0`. This pattern oscillates a, b, and c to rotate the\n    plane in space. By using the `triangle` function, which is repeatedly\n    returning 0..1 for input values continuing in either direction away from 0,\n    we get several resulting 0..1..0.. layers all normal to the vector. \n\n    The `3 * wave(t1)` term introduces a periodic phase shift. The final result\n    is a series of parallel layers, rotating and slicing through 3D space.\n  */\n  v = triangle(3 * wave(t1) + a * x + b * y + c * z)\n\n  // Aggressively thin the plane by making medium-low v very small, for wider \n  // dark regions\n  v = pow(v, 5)\n\n  // Make the highest brightness values (when v is greater than 0.8) white\n  // instead of a saturated color\n  s = v < .8\n  \n  hsv(t1, s, v)\n}\n\n// The 2D version is a slice (a projection) of the 3D version, taken at the\n// z == 0 plane\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\nexport function render(index) {\n  // The core of the oscillation is a triangle wave, bouncing across two total\n  // strip lengths. The 1D version removes the rotation element.\n  v = triangle(2 * wave(t1) + index / pixelCount)\n  \n  // Aggressive gamma correction looks good, reduces the pulse width, and makes\n  // the dimmer parts of the pulse very smooth on APA102s / SK9822s.\n  v = pow(v, 5)\n  \n  s = v < .9  // For the top 0.1 (10%) of brightness values, make it white\n  \n  hsv(t1, s, v)\n}\n"
  },
  "preview": "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"
}