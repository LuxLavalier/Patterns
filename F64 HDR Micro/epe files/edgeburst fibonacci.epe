{
  "name": "edgeburst fibonacci",
  "id": "SDmG3RJTTh9PhnhB4",
  "sources": {
    "main": "/*\n  Edgeburst\n  \n  The triangle() function is simple:\n  \n  output:   1  /\\    /\\\n              /  \\  /  \\   etc\n           0 /    \\/    \\/\n  input:    0  .5  1     2\n  \n  triangle() is the go-to function when you want to mirror something (space, or\n  time!) This pattern does both.\n  \n  Mirroring space is the building block for kaleidoscopes (see 'sound - spectro\n  kalidastrip', 'xorcery', and 'glitch bands'). In this pattern we mirror the\n  pixel's position (expressed as a percentage) around the middle of the strip\n  with `triangle(pct)`.\n  \n  Mirroring a 0..1 time sawtooth turns a looping timer into a back-and-forth\n  repetition.\n*/\n\nexport function beforeRender(delta) {\n  t1 = triangle(time(.1))  // Mirror time (bounce)\n}\n\nphysicalToFibonacci = [ 0, 13, 26, 39, 52, 57, 44, 31, 18, 5, 10, 23, 36, 49, 62, 54, 41, 28, 15, 2, 7, 20, 33, 46, 59, 51, 38, 25, 12, 4, 17, 30, 43, 56, 61, 48, 35, 22, 9, 1, 14, 27, 40, 53, 58, 45, 32, 19, 6, 11, 24, 37, 50, 63, 55, 42, 29, 16, 3, 8, 21, 34, 47, 60 ];\n\nexport function render(index) {\n  index = physicalToFibonacci[index];\n  pct = index / pixelCount\n  edge = clamp(triangle(pct) + t1 * 4 - 2, 0, 1)  // Mirror space\n  \n  h = edge * edge - .2  // Expand violets\n  \n  v = triangle(edge)    // Doubles the frequency\n\n  hsv(h, 1, v)\n}\n"
  },
  "preview": "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"
}